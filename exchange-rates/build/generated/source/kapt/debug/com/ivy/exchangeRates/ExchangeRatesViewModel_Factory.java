// Generated by Dagger (https://dagger.dev).
package com.ivy.exchangeRates;

import com.ivy.exchangeRates.action.RemoveOverriddenRateAct;
import com.ivy.exchangeRates.action.WriteOverriddenRateAct;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ExchangeRatesViewModel_Factory implements Factory<ExchangeRatesViewModel> {
  private final Provider<RemoveOverriddenRateAct> removeOverriddenRateActProvider;

  private final Provider<WriteOverriddenRateAct> writeOverriddenRateActProvider;

  private final Provider<RatesStateFlow> ratesFlowProvider;

  public ExchangeRatesViewModel_Factory(
      Provider<RemoveOverriddenRateAct> removeOverriddenRateActProvider,
      Provider<WriteOverriddenRateAct> writeOverriddenRateActProvider,
      Provider<RatesStateFlow> ratesFlowProvider) {
    this.removeOverriddenRateActProvider = removeOverriddenRateActProvider;
    this.writeOverriddenRateActProvider = writeOverriddenRateActProvider;
    this.ratesFlowProvider = ratesFlowProvider;
  }

  @Override
  public ExchangeRatesViewModel get() {
    return newInstance(removeOverriddenRateActProvider.get(), writeOverriddenRateActProvider.get(), ratesFlowProvider.get());
  }

  public static ExchangeRatesViewModel_Factory create(
      Provider<RemoveOverriddenRateAct> removeOverriddenRateActProvider,
      Provider<WriteOverriddenRateAct> writeOverriddenRateActProvider,
      Provider<RatesStateFlow> ratesFlowProvider) {
    return new ExchangeRatesViewModel_Factory(removeOverriddenRateActProvider, writeOverriddenRateActProvider, ratesFlowProvider);
  }

  public static ExchangeRatesViewModel newInstance(RemoveOverriddenRateAct removeOverriddenRateAct,
      WriteOverriddenRateAct writeOverriddenRateAct, RatesStateFlow ratesFlow) {
    return new ExchangeRatesViewModel(removeOverriddenRateAct, writeOverriddenRateAct, ratesFlow);
  }
}
